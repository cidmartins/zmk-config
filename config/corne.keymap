/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>

&lt {
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <100>;
};

/ {
    behaviors {
        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 40 41 36 0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 41 38 39 40 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
        };

        hml_f: hml_f {
            compatible = "zmk,behavior-hold-tap";
            label = "HML_F";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 40 41 36>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
        };

        hmr_f: hmr_f {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR_F";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 41 38 39 40 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 40 41>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
        };

        sym: sym {
            compatible = "zmk,behavior-hold-tap";
            label = "SYM";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
        };
    };

    macros {
        right_desktop: right_desktop {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LG(RIGHT))>;
            label = "RIGHT_DESKTOP";
        };

        left_desktop: left_desktop {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LC(LEFT_ARROW))>;
            label = "LEFT_DESKTOP";
        };
    };

    combos {
        compatible = "zmk,combos";

        capslock {
            bindings = <&kp CAPSLOCK>;
            key-positions = <17 18>;
        };

        end {
            bindings = <&kp END>;
            key-positions = <30 31>;
        };

        del {
            bindings = <&kp DELETE>;
            key-positions = <18 19>;
        };

        game {
            bindings = <&tog 0>;
            key-positions = <11 22 35>;
            layers = <1>;
        };

        col5 {
            bindings = <&tog 1>;
            key-positions = <0 24 13>;
        };

        semicollon {
            bindings = <&kp SEMI>;
            key-positions = <20 13>;
            layers = <5>;
        };

        wasd {
            bindings = <&tog 14>;
            key-positions = <35 22 11>;
        };

        home {
            bindings = <&kp HOME>;
            key-positions = <6 7>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        layer_0b {
            bindings = <
&none  &kp Q            &kp W            &kp E                &kp R                &kp T        &kp Y             &kp U                &kp I            &kp O            &kp P                       &none
&none  &hml LEFT_GUI A  &hml LEFT_ALT S  &hml_f LEFT_SHIFT D  &hml LEFT_CONTROL F  &kp G        &kp H             &hmr LEFT_CONTROL J  &hmr_f RSHIFT K  &hmr LEFT_ALT L  &hmr LEFT_GUI SINGLE_QUOTE  &none
&none  &kp Z            &kp X            &kp C                &kp V                &kp B        &kp N             &kp M                &kp COMMA        &kp DOT          &kp SLASH                   &none
                                         &lt 2 ESCAPE         &lt 3 SPACE          &lt 4 TAB    &sym 5 BACKSPACE  &lt 6 ENTER          &lt 7 DELETE
            >;
        };

        layer0 {
            // -----------------------------------------------------------------------------------------
            // |  TAB  |  Q  |  W  |  E  |  R  |  T  |     |  Y  |  U  |  I  |  O  |  P  | BKSP | 
            // | CTRL  |  A  |  S  |  D  |  F  |  G  |     |  H  |  J  |  K  |  L  |  ;  |  '   | 
            // | SHFT  |  Z  |  X  |  C  |  V  |  B  |     |  N  |  M  |  ,  |  .  |  /  | SHFT | 
            //                    | RGUI | SPC | MO1 |     | MO2 | ENT | LALT|

            bindings = <
&kp TAB           &kp Q            &kp W            &kp E                &kp R                &kp T    &kp Y            &kp U                 &kp I            &kp O             &kp P                    &kp BACKSPACE
&kp LEFT_CONTROL  &hml LEFT_GUI A  &hml LEFT_ALT S  &hml_f LEFT_SHIFT D  &hml LEFT_CONTROL F  &kp G    &kp H            &hmr RIGHT_CONTROL J  &hmr_f RSHIFT K  &hmr RIGHT_ALT L  &hmr LEFT_GUI SEMICOLON  &kp SINGLE_QUOTE
&kp LEFT_SHIFT    &kp Z            &kp X            &kp C                &kp V                &kp B    &kp N            &kp M                 &kp COMMA        &kp DOT           &kp SLASH                &kp RIGHT_SHIFT
                                                    &kp LEFT_ALT         &kp SPACE            &mo 8    &lt 9 BACKSPACE  &kp ENTER             &kp LEFT_GUI
            >;
        };

        media {
            bindings = <
&trans       &trans  &trans  &trans  &trans  &trans    &trans        &bt BT_PRV        &bt BT_NXT         &trans           &trans        &trans
&bootloader  &trans  &trans  &trans  &trans  &trans    &out OUT_USB  &kp C_PREVIOUS    &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp C_NEXT    &bt BT_CLR
&sys_reset   &trans  &trans  &trans  &trans  &trans    &out OUT_BLE  &bt BT_SEL 0      &bt BT_SEL 1       &bt BT_SEL 3     &bt BT_SEL 4  &bt BT_CLR_ALL
                             &trans  &trans  &trans    &kp C_STOP    &kp C_PLAY_PAUSE  &kp K_MUTE
            >;
        };

        nav {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &kp K_REDO     &kp K_PASTE  &kp K_COPY     &kp K_CUT    &kp K_UNDO  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp CAPS       &kp LEFT     &kp DOWN       &kp UP       &kp RIGHT   &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp INSERT     &kp HOME     &kp PAGE_DOWN  &kp PAGE_UP  &kp END     &trans
                        &trans  &trans  &trans    &kp BACKSPACE  &kp ENTER    &kp DEL
            >;
        };

        mouse {
            bindings = <
&trans  &trans     &trans     &trans     &trans     &trans    &trans     &trans          &trans          &trans        &trans           &trans
&trans  &trans     &trans     &trans     &trans     &trans    &trans     &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT  &trans
&trans  &kp LC(Z)  &kp LC(X)  &kp LC(C)  &kp LC(V)  &trans    &trans     &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_UP  &msc SCRL_RIGHT  &trans
                              &trans     &trans     &trans    &mkp LCLK  &mkp RCLK       &mkp MCLK
            >;
        };

        sym {
            bindings = <
&trans  &kp LEFT_BRACE  &kp AMPERSAND  &kp ASTRK             &kp LEFT_PARENTHESIS   &kp RIGHT_BRACE    &kp CARET  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &trans     &trans     &trans
&trans  &kp COLON       &kp DOLLAR     &kp PERCENT           &kp CARET              &kp PLUS           &trans     &trans            &trans             &kp GRAVE  &kp TILDE  &trans
&trans  &kp TILDE       &kp EXCL       &kp AT                &kp HASH               &kp EXCL           &trans     &trans            &trans             &trans     &trans     &trans
                                       &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp MINUS          &trans     &trans            &trans
            >;
        };

        numbers {
            bindings = <
&trans  &kp LBKT   &kp N7  &kp N8   &kp N9  &kp RBKT     &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp SEMI   &kp N4  &kp N5   &kp N6  &kp EQUAL    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp TILDE  &kp N1  &kp N2   &kp N3  &kp BSLH     &trans  &trans  &trans  &trans  &trans  &trans
                           &kp DOT  &kp N0  &kp MINUS    &trans  &trans  &trans
            >;
        };

        Fun {
            bindings = <
&trans  &kp F12  &kp F7  &kp F8         &kp F9     &kp PRINTSCREEN    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp F11  &kp F4  &kp F5         &kp F6     &kp SCROLLLOCK     &trans  &trans  &trans  &trans  &trans  &bootloader
&trans  &kp F10  &kp F1  &kp F2         &kp F3     &kp PAUSE_BREAK    &trans  &trans  &trans  &trans  &trans  &sys_reset
                         &kp RIGHT_GUI  &kp SPACE  &kp TAB            &trans  &trans  &trans
            >;
        };

        layer1 {
            // -----------------------------------------------------------------------------------------
            // |  ESC |  1  |  2  |  3  |  4  |  5  |     |  6  |  7  |  UP |  9  |  0  |      | 
            // | CTRL |     | ALT | TAB | TAB |     |     |  8  | LFT | DWN | RGT | HOME| PGUP | 
            // | SHFT |     |     |     |LC(T)|     |     | BSP | DEL |     | END | PGDN|      | 
            //                    | RGUI | SPC|     |     |     | ENT | LALT|

            bindings = <
&kp ESCAPE        &kp N1   &kp N2    &kp N3          &kp N4     &kp N5    &kp N6         &kp N7      &kp N8  &kp N9  &kp N0  &trans
&kp LEFT_CONTROL  &kp ESC  &trans    &kp UP_ARROW    &kp TAB    &trans    &trans         &trans      &trans  &trans  &trans  &trans
&kp LEFT_SHIFT    &kp TAB  &kp LEFT  &kp DOWN_ARROW  &kp RIGHT  &trans    &kp BACKSPACE  &kp DELETE  &trans  &trans  &trans  &trans
                                     &trans          &trans     &trans    &trans         &trans      &trans
            >;
        };

        layer2 {
            // ----------------------------------------------------------------------------------------- *
            // | ESC  |  !  |  @  |  #  |  $  |  %  |     |  ^  |  &  |  *  |  (  |  )  | BKSP | 
            // |      |     |     |     |     |     |     |  -  |  =  | {   | }   | "|" | GRAVE| 
            // |      | TILD|     |     |     |     |     | _   | +   | [   | ]   | \   |      | 
            //                    | RGUI| SPC |     |     |     | ENT | LALT |

            bindings = <
&kp ESCAPE  &kp EXCL   &kp AT  &kp HASH       &kp DLLR        &kp PRCNT    &kp CARET  &kp AMPS       &kp ASTRK  &kp LPAR   &kp RPAR          &kp BACKSPACE
&trans      &trans     &trans  &left_desktop  &right_desktop  &trans       &kp MINUS  &kp BACKSPACE  &kp TILDE  &kp GRAVE  &kp SINGLE_QUOTE  &kp TILDE
&trans      &kp TILDE  &trans  &trans         &trans          &trans       &kp UNDER  &kp EQUAL      &kp LBKT   &kp RBKT   &kp BSLH          &kp GRAVE
                               &trans         &trans          &trans       &trans     &trans         &trans
            >;
        };

        layer3 {
            // -----------------------------------------------------------------------------------------
            // | BT1  |   BT3  | RCLK| MS_U| LCLK|         |     |  F1 |  F2 | BTCLAL|  F4 |  F5 |  F6  |
            // | BT2  |        | MS_L| MS_D| MS_R| VOL_UP  |     |  F7 | btclear| bt2| bt1|  F11|  F12 |
            // | BTCLR|        |     |     |     | VOL_DOWN|     |  F3 | F8  | F9  | F10 |     |  RESET
            //                          | RGUI | SPC |     |     |     | ENT | LALT |

            bindings = <
&bt BT_SEL 1  &bt BT_SEL 3  &mkp RCLK       &mmv MOVE_UP     &mkp LCLK          &kp F1         &kp F2       &kp F3  &kp F4  &kp F5   &kp F6      &kp F10
&bt BT_PRV    &bt BT_NXT    &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &kp C_VOLUME_UP    &bootloader    &bootloader  &trans  &trans  &kp F11  &kp F12     &trans
&out OUT_USB  &out OUT_BLE  &bt BT_CLR      &bt BT_CLR_ALL   &kp C_VOLUME_DOWN  &sys_reset     &sys_reset   &trans  &trans  &trans   &sys_reset  &kp RIGHT_GUI
                                            &trans           &trans             &trans         &trans       &trans  &trans
            >;
        };

        game {
            bindings = <
&trans  &kp N1             &kp N2  &kp N3         &kp N4     &kp N5          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &hml LEFT_SHIFT Q  &kp W   &kp E          &kp R      &kp T           &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp A              &kp S   &kp D          &kp F      &kp G           &trans  &trans  &trans  &trans  &trans  &trans
                                   &lt 13 ESCAPE  &kp SPACE  &lt 12 ENTER    &trans  &trans  &trans
            >;
        };

        game2 {
            bindings = <
&trans  &kp N6  &kp N7  &trans  &kp N9  &kp N0    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &kp Y     &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp Z   &kp X   &kp C   &kp V   &kp B     &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        game3 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        WASD {
            bindings = <
&kp TAB           &kp Q  &kp W  &kp E       &kp R      &kp T           &kp Y          &kp U      &kp I         &kp O    &kp P      &kp BACKSPACE
&kp LEFT_CONTROL  &kp A  &kp S  &kp D       &kp F      &kp G           &kp H          &kp J      &kp K         &kp L    &kp SEMI   &kp SINGLE_QUOTE
&kp LEFT_SHIFT    &kp Z  &kp X  &kp C       &kp V      &kp B           &kp N          &kp M      &kp COMMA     &kp DOT  &kp SLASH  &kp RIGHT_SHIFT
                                &kp ESCAPE  &kp SPACE  &lt 15 ENTER    &kp BACKSPACE  &kp ENTER  &kp LEFT_GUI
            >;
        };

        WASD2 {
            bindings = <
&trans  &trans  &kp N7  &kp N8  &kp N9  &kp N0    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp N4  &kp N5  &kp N6  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp N1  &kp N2  &kp N3  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <8 9>;
            then-layer = <10>;
        };
    };
};
